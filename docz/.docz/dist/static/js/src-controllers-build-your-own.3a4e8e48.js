(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./src/controllers/BuildYourOwn.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var a=t("./node_modules/react/index.js"),o=t.n(a),r=t("./node_modules/@mdx-js/tag/dist/index.js");function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}function c(e,n){for(var t=0;t<n.length;t++){var a=n[t];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function p(e,n){return!n||"object"!==s(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function i(e,n){return(i=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var u=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=p(this,m(n).call(this,e))).layout=null,t}var t,a,s;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&i(e,n)}(n,o.a.Component),t=n,(a=[{key:"render",value:function(){var e=this.props,n=e.components;l(e,["components"]);return o.a.createElement(r.MDXTag,{name:"wrapper",components:n},o.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"build-your-own"}},"Build Your Own"),o.a.createElement(r.MDXTag,{name:"p",components:n},"You can create your own controllers by extending the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Controller")," class."),o.a.createElement(r.MDXTag,{name:"ol",components:n},o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Import the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Controller")," class and create a new class that extends ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Controller"),".")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Create a type for the controller's constructor, and a second for the controller's state.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"In the controller's constructor, super an object that matches your state type, spreading in the provided options with any additional state properties.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"Add methods for manipulating state.")),o.a.createElement(r.MDXTag,{name:"li",components:n,parentName:"ol"},o.a.createElement(r.MDXTag,{name:"p",components:n,parentName:"li"},"If desired, add alias definitions for accessing state properties."))),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"simplecountercontroller"}},"SimpleCounterController"),o.a.createElement(r.MDXTag,{name:"p",components:n},"In the example below, we create a controller that will increment and decrement a number. Its constructor takes a parameter, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"options"),", an object with one optional property, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"initial"),", that the constructor uses to set the initial ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"state.value")," property. Both properties are stored in state as ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"{ value: number, initial: number}"),"."),o.a.createElement(r.MDXTag,{name:"p",components:n},"The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"increment")," and ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"decrement")," methods set a new state based on the current state. The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"value")," property is a read-only alias for ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"state.value"),". The ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"diff")," property is a read only value expressing the difference between the controller's current value and its initial value."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Example:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ts"}},'import { Controller } from "./Controller"\n\ninterface Options {\n    initial?: number\n}\n\ninterface State extends Options {\n    value: number\n}\n\nexport class SimpleCounterController extends Controller<State> {\n    constructor(options: Options = { initial: 0 } as Options) {\n        super({\n            value: options.initial,\n            ...options,\n        })\n    }\n\n    public increment = () => {\n        const { value } = this.state\n        this.setState({\n            value: value + 1,\n        })\n    }\n\n    public decrement = () => {\n        const { value } = this.state\n        this.setState({\n            value: value - 1,\n        })\n    }\n\n    get value() {\n        return this.state.value\n    }\n\n    get diff() {\n        return this.state.initial - this.state\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Assuming we've defined our controller in its own ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".ts")," file (in our project's code folder), we could use the controller like so:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ts"}},'import { Overrider } from "framer"\nimport { SimpleCounterController } from "./SimpleCounterController"\n\nconst controller = new SimpleCounterController({\n    initial: 10,\n})\n\nexport const DecrementButton = () => ({\n    onClick: controller.decrement,\n})\n\nexport const IncrementButton = () => ({\n    onClick: controller.increment,\n})\n\nexport const ValueDisplay = () => ({\n    $value: controller.value,\n})\n')),o.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"datatablecontroller"}},"DataTableController"),o.a.createElement(r.MDXTag,{name:"p",components:n},"In this example, we'll assume we've created a code component, ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"DataTable"),", that displays some data passed into its ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"data")," prop. We want to fetch the data from an API endpoint, however the response includes an array of several ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"pages")," of data. Each page could be passed in as ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"DataTable"),"'s ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"data")," prop, however the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"DataTable")," component should only display one page at a time."),o.a.createElement(r.MDXTag,{name:"p",components:n},"As the component's authors, we ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"could")," decide to accept an array of data objects through the ",o.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"data")," prop and store the current page in the component's state. If we did so, however, our component would also have to contain all controls necessary for changing the current page."),o.a.createElement(r.MDXTag,{name:"p",components:n},"Instead, we'll store this state ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"outside")," of the component, so that designers using our component will be free to implement page controls however they wish. In order to help our designers, we'll also provide them with a ",o.a.createElement(r.MDXTag,{name:"em",components:n,parentName:"p"},"controller")," for managing page state."),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ts"}},'import { Controller } from "./Controller"\n\ninterface Options {\n    url: string\n    currentPage?: number\n}\n\ninterface State extends Options {\n    pages: object[]\n}\n\nexport class DataTableController extends Controller<State> {\n    constructor(options: Options) {\n        super({\n            pages: [],\n            currentPage: 0,\n            ...options,\n        })\n\n        this.refresh()\n    }\n\n    refresh = async () => {\n        const response = await fetch(this.state.url)\n        const data = await response.json()\n        this.setState({\n            pages: data.pages,\n        })\n    }\n\n    public prevPage = () => {\n        const { currentPage } = this.state\n        if (this.progress === 0) return\n        this.setState({\n            currentPage: currentPage - 1,\n        })\n    }\n\n    public nextPage = () => {\n        const { currentPage } = this.state\n        if (this.progress === 1) return\n        this.setState({\n            currentPage: currentPage + 1,\n        })\n    }\n\n    get progress() {\n        return this.state.currentPage / this.state.pages.length - 1\n    }\n\n    get currentPage() {\n        return this.state.currentPage\n    }\n\n    get data() {\n        return this.state.pages[this.state.currentPage]\n    }\n}\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"In our Overrides file, we could then use this controller like so:"),o.a.createElement(r.MDXTag,{name:"pre",components:n},o.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-ts"}},'import { Overrider } from "framer"\nimport { DataTableController } from "./DataTableController"\n\nconst controller = new DataTableController({\n    url: "https://www.largeco.com/api/tabledata",\n})\n\nexport const DataTable = () => controller.state\n\nexport const PrevPage = () => ({\n    opacity: controller.progress === 0 ? 0.5 : 1,\n    onClick: controller.nextPage,\n})\n\nexport const NextPage = () => ({\n    opacity: controller.progress === 1 ? 0.5 : 1,\n    $value: controller.prevPage,\n})\n')),o.a.createElement(r.MDXTag,{name:"p",components:n},"Because we've located state outside of the component, designers can connect these overrides to whatever Frames or components that they wish."))}}])&&c(t.prototype,a),s&&c(t,s),n}();u.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=src-controllers-build-your-own.3700c8f1afaba20e14bd.js.map