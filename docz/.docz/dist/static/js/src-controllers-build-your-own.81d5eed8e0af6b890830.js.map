{"version":3,"sources":["webpack:///./src/controllers/BuildYourOwn.mdx"],"names":["MDXContent","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","layout","React","Component","_this$props","components","_objectWithoutProperties","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","_mdx_js_tag__WEBPACK_IMPORTED_MODULE_1__","name","id","parentName","className"],"mappings":"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","file":"static/js/src-controllers-build-your-own.3a4e8e48.js","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"build-your-own\"}}>{`Build Your Own`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can create your own controllers by extending the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Controller`}</MDXTag>{` class.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Import the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Controller`}</MDXTag>{` class and create a new class that extends `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Controller`}</MDXTag>{`.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Create a type for the controller's constructor, and a second for the controller's state.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`In the controller's constructor, super an object that matches your state type, spreading in the provided options with any additional state properties.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Add methods for manipulating state.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`If desired, add alias definitions for accessing state properties.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"simplecountercontroller\"}}>{`SimpleCounterController`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the example below, we create a controller that will increment and decrement a number. Its constructor takes a parameter, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`options`}</MDXTag>{`, an object with one optional property, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`initial`}</MDXTag>{`, that the constructor uses to set the initial `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state.value`}</MDXTag>{` property. Both properties are stored in state as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{ value: number, initial: number}`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`increment`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decrement`}</MDXTag>{` methods set a new state based on the current state. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`value`}</MDXTag>{` property is a read-only alias for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state.value`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`diff`}</MDXTag>{` property is a read only value expressing the difference between the controller's current value and its initial value.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`import { Controller } from \"./Controller\"\n\ninterface Options {\n    initial?: number\n}\n\ninterface State extends Options {\n    value: number\n}\n\nexport class SimpleCounterController extends Controller<State> {\n    constructor(options: Options = { initial: 0 } as Options) {\n        super({\n            value: options.initial,\n            ...options,\n        })\n    }\n\n    public increment = () => {\n        const { value } = this.state\n        this.setState({\n            value: value + 1,\n        })\n    }\n\n    public decrement = () => {\n        const { value } = this.state\n        this.setState({\n            value: value - 1,\n        })\n    }\n\n    get value() {\n        return this.state.value\n    }\n\n    get diff() {\n        return this.state.initial - this.state\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Assuming we've defined our controller in its own `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.ts`}</MDXTag>{` file (in our project's code folder), we could use the controller like so:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`import { Overrider } from \"framer\"\nimport { SimpleCounterController } from \"./SimpleCounterController\"\n\nconst controller = new SimpleCounterController({\n    initial: 10,\n})\n\nexport const DecrementButton = () => ({\n    onClick: controller.decrement,\n})\n\nexport const IncrementButton = () => ({\n    onClick: controller.increment,\n})\n\nexport const ValueDisplay = () => ({\n    \\$value: controller.value,\n})\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"datatablecontroller\"}}>{`DataTableController`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this example, we'll assume we've created a code component, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DataTable`}</MDXTag>{`, that displays some data passed into its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`data`}</MDXTag>{` prop. We want to fetch the data from an API endpoint, however the response includes an array of several `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pages`}</MDXTag>{` of data. Each page could be passed in as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DataTable`}</MDXTag>{`'s `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`data`}</MDXTag>{` prop, however the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DataTable`}</MDXTag>{` component should only display one page at a time.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As the component's authors, we `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`could`}</MDXTag>{` decide to accept an array of data objects through the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`data`}</MDXTag>{` prop and store the current page in the component's state. If we did so, however, our component would also have to contain all controls necessary for changing the current page.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Instead, we'll store this state `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`outside`}</MDXTag>{` of the component, so that designers using our component will be free to implement page controls however they wish. In order to help our designers, we'll also provide them with a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`controller`}</MDXTag>{` for managing page state.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`import { Controller } from \"./Controller\"\n\ninterface Options {\n    url: string\n    currentPage?: number\n}\n\ninterface State extends Options {\n    pages: object[]\n}\n\nexport class DataTableController extends Controller<State> {\n    constructor(options: Options) {\n        super({\n            pages: [],\n            currentPage: 0,\n            ...options,\n        })\n\n        this.refresh()\n    }\n\n    refresh = async () => {\n        const response = await fetch(this.state.url)\n        const data = await response.json()\n        this.setState({\n            pages: data.pages,\n        })\n    }\n\n    public prevPage = () => {\n        const { currentPage } = this.state\n        if (this.progress === 0) return\n        this.setState({\n            currentPage: currentPage - 1,\n        })\n    }\n\n    public nextPage = () => {\n        const { currentPage } = this.state\n        if (this.progress === 1) return\n        this.setState({\n            currentPage: currentPage + 1,\n        })\n    }\n\n    get progress() {\n        return this.state.currentPage / this.state.pages.length - 1\n    }\n\n    get currentPage() {\n        return this.state.currentPage\n    }\n\n    get data() {\n        return this.state.pages[this.state.currentPage]\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In our Overrides file, we could then use this controller like so:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`import { Overrider } from \"framer\"\nimport { DataTableController } from \"./DataTableController\"\n\nconst controller = new DataTableController({\n    url: \"https://www.largeco.com/api/tabledata\",\n})\n\nexport const DataTable = () => controller.state\n\nexport const PrevPage = () => ({\n    opacity: controller.progress === 0 ? 0.5 : 1,\n    onClick: controller.nextPage,\n})\n\nexport const NextPage = () => ({\n    opacity: controller.progress === 1 ? 0.5 : 1,\n    \\$value: controller.prevPage,\n})\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Because we've located state outside of the component, designers can connect these overrides to whatever Frames or components that they wish.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}