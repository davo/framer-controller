(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"./src/hooks/createPageControls.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var o=t("./node_modules/react/index.js"),a=t.n(o),r=t("./node_modules/@mdx-js/tag/dist/index.js");function p(e){return(p="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}function m(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function c(e,n){return!n||"object"!==p(n)&&"function"!==typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function g(e,n){return(g=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var l=function(e){function n(e){var t;return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),(t=c(this,i(n).call(this,e))).layout=null,t}var t,o,p;return function(e,n){if("function"!==typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&g(e,n)}(n,a.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.components;s(e,["components"]);return a.a.createElement(r.MDXTag,{name:"wrapper",components:n},a.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"createpagecontrols"}},"createPageControls"),a.a.createElement(r.MDXTag,{name:"p",components:n},"The ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"createPageControls")," function returns a hook, ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"usePageControls"),", that you\ncan use to control a page component. This hook provides an ",a.a.createElement(r.MDXTag,{name:"strong",components:n,parentName:"p"},"alternative")," to\nthe PageController."),a.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"usage"}},"Usage"),a.a.createElement(r.MDXTag,{name:"p",components:n},"To use this hook, first create a ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"usePageControls")," hook by calling\n",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"createPageControls"),"."),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx"}},"import { Override } from 'framer'\nimport { createPageControls } from 'framer-controller'\n\nconst usePageControls = createPageControls()\n")),a.a.createElement(r.MDXTag,{name:"p",components:n},"Next, override the page component you wish to control as shown below."),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx"}},"export function PageComponent(props): Override {\n    const { currentPage, onChangePage } = usePageControls(props)\n\n    return {\n        currentPage,\n        onChangePage,\n    }\n}\n")),a.a.createElement(r.MDXTag,{name:"p",components:n},"To control the page component through separate overrides, call the\n",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"usePageControls")," hook from your override and use the methods it returns."),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx"}},"export function NextButton(props): Override {\n    const { snapToNextPage } = usePageControls()\n\n    return {\n        onTap: () => snapToNextPage(),\n    }\n}\n")),a.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"methods"}},"Methods"),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"onchangepage"}},"onChangePage"),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"(currentPage: number) => void")),a.a.createElement(r.MDXTag,{name:"p",components:n},"Updates the hook when the user changes the Page component's current page."),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"snaptopage"}},"snapToPage"),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"(index: number = 0) => void")),a.a.createElement(r.MDXTag,{name:"p",components:n},"Snaps the page component to the page at the provided index. Defaults to ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0"),"."),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"snaptonextpage"}},"snapToNextPage"),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"(direction: 'right' | 'left' = 'right') => void")),a.a.createElement(r.MDXTag,{name:"p",components:n},"Snaps the page component to the next page in a given direction, either ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'"right"'),"\nor ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'"left"'),". Defaults to ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},'"right"'),"."),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"snaptopreviouspage"}},"snapToPreviousPage"),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"() => void")),a.a.createElement(r.MDXTag,{name:"p",components:n},'Snaps the page component to the previous page in the hook\'s "history" of visited\npages.'),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"snaptoprogress"}},"snapToProgress"),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"(progress: number) => void")),a.a.createElement(r.MDXTag,{name:"p",components:n},'Snaps the page component to the nearest page to a given "progress" value, where\n',a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"0")," is the Page component's first page and ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"1")," is the last."),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"nextpage"}},"nextPage"),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"(direction: 'right' | 'left' = 'right') => number")),a.a.createElement(r.MDXTag,{name:"p",components:n},"Returns the index of the next page in the given direction, or else ",a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"null")," if no\npage exists in that direction."),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"previouspage"}},"previousPage"),a.a.createElement(r.MDXTag,{name:"p",components:n},a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"() => void")),a.a.createElement(r.MDXTag,{name:"p",components:n},'Returns the index of the previous page in the hook\'s "history" of visited pages,\nor else ',a.a.createElement(r.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"null")," if no page exists."),a.a.createElement(r.MDXTag,{name:"h2",components:n,props:{id:"properties"}},"Properties"),a.a.createElement(r.MDXTag,{name:"h3",components:n,props:{id:"currentpage"}},"currentPage"),a.a.createElement(r.MDXTag,{name:"p",components:n},"The component's current page (as determined by the hook)."),a.a.createElement(r.MDXTag,{name:"h1",components:n,props:{id:"example"}},"Example"),a.a.createElement(r.MDXTag,{name:"pre",components:n},a.a.createElement(r.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-tsx"}},"import { Override } from 'framer'\nimport { createPageControls } from 'framer-controller'\n\nconst usePageControls = createPageControls()\n\n// Sync the component with the usePageControls hook\nexport function PageComponent(props): Override {\n    const { currentPage, onChangePage } = usePageControls(props)\n\n    return {\n        currentPage,\n        onChangePage,\n    }\n}\n\n// Move to the next page (right)\nexport function NextButton(props): Override {\n    const { snapToNextPage, nextPage } = usePageControls()\n\n    return {\n        opacity: nextPage('right') === null ? 0.3 : 1,\n        onTap: () => snapToNextPage(),\n    }\n}\n\n// Move to the next page (left)\nexport function PrevButton(props): Override {\n    const { snapToNextPage, nextPage } = usePageControls()\n\n    return {\n        opacity: nextPage('left') === null ? 0.3 : 1,\n        onTap: () => snapToNextPage('left'),\n    }\n}\n\n// Show the current page number\nexport function PageNumber(props): Override {\n    const { currentPage, nextPage } = usePageControls()\n\n    return {\n        text: currentPage + 1,\n    }\n}\n\n// Jump to start (progress 0)\nexport function ToStart(props): Override {\n    const { snapToProgress } = usePageControls()\n\n    return {\n        onTap: () => snapToProgress(0),\n    }\n}\n\n// Jump to end (progress 1)\nexport function ToEnd(props): Override {\n    const { snapToProgress } = usePageControls()\n\n    return {\n        onTap: () => snapToProgress(1),\n    }\n}\n\n// Show the previous page (in history)\nexport function Undo(props): Override {\n    const { snapToPreviousPage, previousPage } = usePageControls()\n\n    return {\n        opacity: previousPage() === null ? 0.3 : 1,\n        onTap: () => snapToPreviousPage(),\n    }\n}\n\n// Show a progress bar\nexport function ProgressBar(props): Override {\n    const { progress, currentPage, pages } = usePageControls()\n\n    const background =\n        pages[currentPage] && pages[currentPage].props.background.initialValue\n\n    return {\n        animate: {\n            background,\n            width: props.width * progress,\n        },\n    }\n}\n")))}}])&&m(t.prototype,o),p&&m(t,p),n}();l.__docgenInfo={description:"",methods:[],displayName:"MDXContent"}}}]);
//# sourceMappingURL=src-hooks-create-page-controls.7591c493afec367a1c1a.js.map