{"remainingRequest":"/Users/stephenruiz/GitHub/framer-controller/docz/node_modules/docz/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/stephenruiz/GitHub/framer-controller/docz/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[[\"/Users/stephenruiz/GitHub/framer-controller/docz/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}]],\"babelrc\":false,\"cacheCompression\":true,\"compact\":true}!/Users/stephenruiz/GitHub/framer-controller/docz/src/controllers/BuildYourOwn.mdx","dependencies":[{"path":"/Users/stephenruiz/GitHub/framer-controller/docz/src/controllers/BuildYourOwn.mdx","mtime":1553050900274},{"path":"/Users/stephenruiz/GitHub/framer-controller/docz/node_modules/cache-loader/dist/cjs.js","mtime":1558188545990},{"path":"/Users/stephenruiz/GitHub/framer-controller/docz/node_modules/docz/node_modules/babel-loader/lib/index.js","mtime":1556118752233}],"contextDependencies":[],"result":["function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}import React from'react';import{MDXTag}from'@mdx-js/tag';var layoutProps={};var MDXContent=/*#__PURE__*/function(_React$Component){_inherits(MDXContent,_React$Component);function MDXContent(props){var _this;_classCallCheck(this,MDXContent);_this=_possibleConstructorReturn(this,_getPrototypeOf(MDXContent).call(this,props));_this.layout=null;return _this;}_createClass(MDXContent,[{key:\"render\",value:function render(){var _this$props=this.props,components=_this$props.components,props=_objectWithoutProperties(_this$props,[\"components\"]);return React.createElement(MDXTag,{name:\"wrapper\",components:components},React.createElement(MDXTag,{name:\"h1\",components:components,props:{\"id\":\"build-your-own\"}},\"Build Your Own\"),React.createElement(MDXTag,{name:\"p\",components:components},\"You can create your own controllers by extending the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"Controller\"),\" class.\"),React.createElement(MDXTag,{name:\"ol\",components:components},React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},React.createElement(MDXTag,{name:\"p\",components:components,parentName:\"li\"},\"Import the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"Controller\"),\" class and create a new class that extends \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"Controller\"),\".\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},React.createElement(MDXTag,{name:\"p\",components:components,parentName:\"li\"},\"Create a type for the controller's constructor, and a second for the controller's state.\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},React.createElement(MDXTag,{name:\"p\",components:components,parentName:\"li\"},\"In the controller's constructor, super an object that matches your state type, spreading in the provided options with any additional state properties.\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},React.createElement(MDXTag,{name:\"p\",components:components,parentName:\"li\"},\"Add methods for manipulating state.\")),React.createElement(MDXTag,{name:\"li\",components:components,parentName:\"ol\"},React.createElement(MDXTag,{name:\"p\",components:components,parentName:\"li\"},\"If desired, add alias definitions for accessing state properties.\"))),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"simplecountercontroller\"}},\"SimpleCounterController\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In the example below, we create a controller that will increment and decrement a number. Its constructor takes a parameter, \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"options\"),\", an object with one optional property, \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"initial\"),\", that the constructor uses to set the initial \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"state.value\"),\" property. Both properties are stored in state as \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"{ value: number, initial: number}\"),\".\"),React.createElement(MDXTag,{name:\"p\",components:components},\"The \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"increment\"),\" and \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"decrement\"),\" methods set a new state based on the current state. The \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"value\"),\" property is a read-only alias for \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"state.value\"),\". The \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"diff\"),\" property is a read only value expressing the difference between the controller's current value and its initial value.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Example:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-ts\"}},\"import { Controller } from \\\"./Controller\\\"\\n\\ninterface Options {\\n    initial?: number\\n}\\n\\ninterface State extends Options {\\n    value: number\\n}\\n\\nexport class SimpleCounterController extends Controller<State> {\\n    constructor(options: Options = { initial: 0 } as Options) {\\n        super({\\n            value: options.initial,\\n            ...options,\\n        })\\n    }\\n\\n    public increment = () => {\\n        const { value } = this.state\\n        this.setState({\\n            value: value + 1,\\n        })\\n    }\\n\\n    public decrement = () => {\\n        const { value } = this.state\\n        this.setState({\\n            value: value - 1,\\n        })\\n    }\\n\\n    get value() {\\n        return this.state.value\\n    }\\n\\n    get diff() {\\n        return this.state.initial - this.state\\n    }\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Assuming we've defined our controller in its own \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\".ts\"),\" file (in our project's code folder), we could use the controller like so:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-ts\"}},\"import { Overrider } from \\\"framer\\\"\\nimport { SimpleCounterController } from \\\"./SimpleCounterController\\\"\\n\\nconst controller = new SimpleCounterController({\\n    initial: 10,\\n})\\n\\nexport const DecrementButton = () => ({\\n    onClick: controller.decrement,\\n})\\n\\nexport const IncrementButton = () => ({\\n    onClick: controller.increment,\\n})\\n\\nexport const ValueDisplay = () => ({\\n    $value: controller.value,\\n})\\n\")),React.createElement(MDXTag,{name:\"h2\",components:components,props:{\"id\":\"datatablecontroller\"}},\"DataTableController\"),React.createElement(MDXTag,{name:\"p\",components:components},\"In this example, we'll assume we've created a code component, \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"DataTable\"),\", that displays some data passed into its \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"data\"),\" prop. We want to fetch the data from an API endpoint, however the response includes an array of several \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"pages\"),\" of data. Each page could be passed in as \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"DataTable\"),\"'s \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"data\"),\" prop, however the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"DataTable\"),\" component should only display one page at a time.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"As the component's authors, we \",React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"could\"),\" decide to accept an array of data objects through the \",React.createElement(MDXTag,{name:\"inlineCode\",components:components,parentName:\"p\"},\"data\"),\" prop and store the current page in the component's state. If we did so, however, our component would also have to contain all controls necessary for changing the current page.\"),React.createElement(MDXTag,{name:\"p\",components:components},\"Instead, we'll store this state \",React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"outside\"),\" of the component, so that designers using our component will be free to implement page controls however they wish. In order to help our designers, we'll also provide them with a \",React.createElement(MDXTag,{name:\"em\",components:components,parentName:\"p\"},\"controller\"),\" for managing page state.\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-ts\"}},\"import { Controller } from \\\"./Controller\\\"\\n\\ninterface Options {\\n    url: string\\n    currentPage?: number\\n}\\n\\ninterface State extends Options {\\n    pages: object[]\\n}\\n\\nexport class DataTableController extends Controller<State> {\\n    constructor(options: Options) {\\n        super({\\n            pages: [],\\n            currentPage: 0,\\n            ...options,\\n        })\\n\\n        this.refresh()\\n    }\\n\\n    refresh = async () => {\\n        const response = await fetch(this.state.url)\\n        const data = await response.json()\\n        this.setState({\\n            pages: data.pages,\\n        })\\n    }\\n\\n    public prevPage = () => {\\n        const { currentPage } = this.state\\n        if (this.progress === 0) return\\n        this.setState({\\n            currentPage: currentPage - 1,\\n        })\\n    }\\n\\n    public nextPage = () => {\\n        const { currentPage } = this.state\\n        if (this.progress === 1) return\\n        this.setState({\\n            currentPage: currentPage + 1,\\n        })\\n    }\\n\\n    get progress() {\\n        return this.state.currentPage / this.state.pages.length - 1\\n    }\\n\\n    get currentPage() {\\n        return this.state.currentPage\\n    }\\n\\n    get data() {\\n        return this.state.pages[this.state.currentPage]\\n    }\\n}\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"In our Overrides file, we could then use this controller like so:\"),React.createElement(MDXTag,{name:\"pre\",components:components},React.createElement(MDXTag,{name:\"code\",components:components,parentName:\"pre\",props:{\"className\":\"language-ts\"}},\"import { Overrider } from \\\"framer\\\"\\nimport { DataTableController } from \\\"./DataTableController\\\"\\n\\nconst controller = new DataTableController({\\n    url: \\\"https://www.largeco.com/api/tabledata\\\",\\n})\\n\\nexport const DataTable = () => controller.state\\n\\nexport const PrevPage = () => ({\\n    opacity: controller.progress === 0 ? 0.5 : 1,\\n    onClick: controller.nextPage,\\n})\\n\\nexport const NextPage = () => ({\\n    opacity: controller.progress === 1 ? 0.5 : 1,\\n    $value: controller.prevPage,\\n})\\n\")),React.createElement(MDXTag,{name:\"p\",components:components},\"Because we've located state outside of the component, designers can connect these overrides to whatever Frames or components that they wish.\"));}}]);return MDXContent;}(React.Component);export{MDXContent as default};MDXContent.__docgenInfo={\"description\":\"\",\"methods\":[],\"displayName\":\"MDXContent\"};",{"version":3,"sources":["/Users/stephenruiz/GitHub/framer-controller/docz/src/controllers/BuildYourOwn.mdx"],"names":["React","MDXTag","layoutProps","MDXContent","props","layout","components","Component"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"build-your-own\"}}>{`Build Your Own`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`You can create your own controllers by extending the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Controller`}</MDXTag>{` class.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Import the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Controller`}</MDXTag>{` class and create a new class that extends `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Controller`}</MDXTag>{`.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Create a type for the controller's constructor, and a second for the controller's state.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`In the controller's constructor, super an object that matches your state type, spreading in the provided options with any additional state properties.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`Add methods for manipulating state.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">\n<MDXTag name=\"p\" components={components} parentName=\"li\">{`If desired, add alias definitions for accessing state properties.`}</MDXTag>\n</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"simplecountercontroller\"}}>{`SimpleCounterController`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In the example below, we create a controller that will increment and decrement a number. Its constructor takes a parameter, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`options`}</MDXTag>{`, an object with one optional property, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`initial`}</MDXTag>{`, that the constructor uses to set the initial `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state.value`}</MDXTag>{` property. Both properties are stored in state as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`{ value: number, initial: number}`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`increment`}</MDXTag>{` and `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`decrement`}</MDXTag>{` methods set a new state based on the current state. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`value`}</MDXTag>{` property is a read-only alias for `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`state.value`}</MDXTag>{`. The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`diff`}</MDXTag>{` property is a read only value expressing the difference between the controller's current value and its initial value.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Example:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`import { Controller } from \"./Controller\"\n\ninterface Options {\n    initial?: number\n}\n\ninterface State extends Options {\n    value: number\n}\n\nexport class SimpleCounterController extends Controller<State> {\n    constructor(options: Options = { initial: 0 } as Options) {\n        super({\n            value: options.initial,\n            ...options,\n        })\n    }\n\n    public increment = () => {\n        const { value } = this.state\n        this.setState({\n            value: value + 1,\n        })\n    }\n\n    public decrement = () => {\n        const { value } = this.state\n        this.setState({\n            value: value - 1,\n        })\n    }\n\n    get value() {\n        return this.state.value\n    }\n\n    get diff() {\n        return this.state.initial - this.state\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Assuming we've defined our controller in its own `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`.ts`}</MDXTag>{` file (in our project's code folder), we could use the controller like so:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`import { Overrider } from \"framer\"\nimport { SimpleCounterController } from \"./SimpleCounterController\"\n\nconst controller = new SimpleCounterController({\n    initial: 10,\n})\n\nexport const DecrementButton = () => ({\n    onClick: controller.decrement,\n})\n\nexport const IncrementButton = () => ({\n    onClick: controller.increment,\n})\n\nexport const ValueDisplay = () => ({\n    \\$value: controller.value,\n})\n`}</MDXTag></MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"datatablecontroller\"}}>{`DataTableController`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`In this example, we'll assume we've created a code component, `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DataTable`}</MDXTag>{`, that displays some data passed into its `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`data`}</MDXTag>{` prop. We want to fetch the data from an API endpoint, however the response includes an array of several `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`pages`}</MDXTag>{` of data. Each page could be passed in as `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DataTable`}</MDXTag>{`'s `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`data`}</MDXTag>{` prop, however the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`DataTable`}</MDXTag>{` component should only display one page at a time.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`As the component's authors, we `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`could`}</MDXTag>{` decide to accept an array of data objects through the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`data`}</MDXTag>{` prop and store the current page in the component's state. If we did so, however, our component would also have to contain all controls necessary for changing the current page.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Instead, we'll store this state `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`outside`}</MDXTag>{` of the component, so that designers using our component will be free to implement page controls however they wish. In order to help our designers, we'll also provide them with a `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`controller`}</MDXTag>{` for managing page state.`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`import { Controller } from \"./Controller\"\n\ninterface Options {\n    url: string\n    currentPage?: number\n}\n\ninterface State extends Options {\n    pages: object[]\n}\n\nexport class DataTableController extends Controller<State> {\n    constructor(options: Options) {\n        super({\n            pages: [],\n            currentPage: 0,\n            ...options,\n        })\n\n        this.refresh()\n    }\n\n    refresh = async () => {\n        const response = await fetch(this.state.url)\n        const data = await response.json()\n        this.setState({\n            pages: data.pages,\n        })\n    }\n\n    public prevPage = () => {\n        const { currentPage } = this.state\n        if (this.progress === 0) return\n        this.setState({\n            currentPage: currentPage - 1,\n        })\n    }\n\n    public nextPage = () => {\n        const { currentPage } = this.state\n        if (this.progress === 1) return\n        this.setState({\n            currentPage: currentPage + 1,\n        })\n    }\n\n    get progress() {\n        return this.state.currentPage / this.state.pages.length - 1\n    }\n\n    get currentPage() {\n        return this.state.currentPage\n    }\n\n    get data() {\n        return this.state.pages[this.state.currentPage]\n    }\n}\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`In our Overrides file, we could then use this controller like so:`}</MDXTag>\n<MDXTag name=\"pre\" components={components}><MDXTag name=\"code\" components={components} parentName=\"pre\" props={{\"className\":\"language-ts\"}}>{`import { Overrider } from \"framer\"\nimport { DataTableController } from \"./DataTableController\"\n\nconst controller = new DataTableController({\n    url: \"https://www.largeco.com/api/tabledata\",\n})\n\nexport const DataTable = () => controller.state\n\nexport const PrevPage = () => ({\n    opacity: controller.progress === 0 ? 0.5 : 1,\n    onClick: controller.nextPage,\n})\n\nexport const NextPage = () => ({\n    opacity: controller.progress === 1 ? 0.5 : 1,\n    \\$value: controller.prevPage,\n})\n`}</MDXTag></MDXTag>\n<MDXTag name=\"p\" components={components}>{`Because we've located state outside of the component, designers can connect these overrides to whatever Frames or components that they wish.`}</MDXTag>\n           </MDXTag>\n  }\n}\n  "]}]}